{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["BabyActivities","buildPeriod","Math","ceil","random","type","nappy","sleep","cry","feed","buildHour","periods","translateTime","hour","minutes","Period","props","className","time","toLowerCase","Hour","buildInitialState","schedule","hours","App","React","useState","state","setState","onClick","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MAGKA,E,oDAyDL,SAASC,IACL,OAJOC,KAAKC,KAAqB,EAAhBD,KAAKE,WAKlB,KAAK,EACL,KAAK,EACD,MAAO,CACHC,KAAML,EAAeM,OAG7B,KAAK,EACD,MAAO,CACHD,KAAML,EAAeO,OAG7B,KAAK,EACD,MAAO,CACHF,KAAML,EAAeQ,KAG7B,KAAK,EACL,KAAK,EACD,MAAO,CACHH,KAAML,EAAeS,MAG7B,QACI,MAAO,CACHJ,KAAML,EAAeQ,MAMrC,SAASE,IACL,MAAO,CACHC,QAAS,CACLV,IACAA,IACAA,IACAA,MAoCZ,SAASW,EAAcC,EAAcC,GACjC,OAAID,EAAO,GACD,GAAN,OAAUA,EAAV,YAAkBC,EAAlB,MAEa,KAATD,EACM,MAAN,OAAaC,EAAb,MAES,KAATD,EACM,MAAN,OAAaC,EAAb,MAEE,GAAN,OAAUD,EAAO,GAAjB,YAAuBC,EAAvB,MAIR,SAASC,EAAOC,GACZ,OACI,yBAAKC,UAAU,UACX,uBAAGA,UAAU,gBACT,8BAAOD,EAAME,OAEjB,uBAAGD,UAAS,qCAAgCD,EAAMX,KAAKc,gBAAkBH,EAAMX,OAK3F,SAASe,EAAKJ,GACV,IAAMH,EAAOG,EAAME,KACnB,OACI,yBAAKD,UAAU,QACX,kBAACF,EAAD,CAAQV,KAAMW,EAAML,QAAQ,GAAGN,KAAMa,KAAMN,EAAcC,EAAM,QAC/D,kBAACE,EAAD,CAAQV,KAAMW,EAAML,QAAQ,GAAGN,KAAMa,KAAMN,EAAcC,EAAM,QAC/D,kBAACE,EAAD,CAAQV,KAAMW,EAAML,QAAQ,GAAGN,KAAMa,KAAMN,EAAcC,EAAM,QAC/D,kBAACE,EAAD,CAAQV,KAAMW,EAAML,QAAQ,GAAGN,KAAMa,KAAMN,EAAcC,EAAM,SAK3E,SAASQ,IACL,MAAO,CACHC,SArEG,CACHC,MAAO,CACHb,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,Q,SA9HPV,K,cAAAA,E,cAAAA,E,UAAAA,E,aAAAA,M,KA6LUwB,MAff,WAAgB,IAAD,EAEeC,IAAMC,SAASL,KAF9B,mBAEJM,EAFI,KAEGC,EAFH,KAIX,OACI,yBAAKX,UAAU,OACX,6CACA,4BAAQY,QAAS,kBAAMD,EAASP,OAAhC,oBACA,yBAAKJ,UAAU,YACVU,EAAML,SAASC,MAAMO,KAAI,SAACjB,EAAMkB,GAAP,OAAiB,kBAACX,EAAD,CAAMY,IAAKD,EAAOb,KAAMa,EAAOpB,QAASE,EAAKF,gBC9KpFsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.34f89385.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nenum BabyActivities {\n    nappy = \"NAPPY\",\n    sleep = \"SLEEP\",\n    cry = \"CRY\",\n    feed = \"FEED\",\n}\n\ninterface Period {\n    type: BabyActivities\n}\n\ninterface Hour {\n    periods: [\n        Period,\n        Period,\n        Period,\n        Period\n    ]\n}\n\ninterface Day {\n    hours: [\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n        Hour,\n    ]\n}\n\ninterface State {\n    schedule: Day,\n}\n\nfunction rollDice(): number {\n    return Math.ceil(Math.random() * 6);\n}\n\nfunction buildPeriod(): Period {\n    switch (rollDice()) {\n        case 1:\n        case 5: {\n            return {\n                type: BabyActivities.nappy\n            };\n        }\n        case 2: {\n            return {\n                type: BabyActivities.sleep\n            };\n        }\n        case 3: {\n            return {\n                type: BabyActivities.cry\n            };\n        }\n        case 4:\n        case 6: {\n            return {\n                type: BabyActivities.feed\n            };\n        }\n        default: {\n            return {\n                type: BabyActivities.cry\n            };\n        }\n    }\n}\n\nfunction buildHour(): Hour {\n    return {\n        periods: [\n            buildPeriod(),\n            buildPeriod(),\n            buildPeriod(),\n            buildPeriod(),\n        ]\n    }\n}\n\nfunction buildDay(): Day {\n    return {\n        hours: [\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n            buildHour(),\n        ]\n    }\n}\n\nfunction translateTime(hour: number, minutes: string): string {\n    if (hour < 12) {\n        return `${hour}:${minutes}AM`\n    } else {\n        if (hour === 12) {\n            return `12:${minutes}PM`\n        }\n        if (hour === 24) {\n            return `12:${minutes}AM`\n        }\n        return `${hour - 12}:${minutes}PM`\n    }\n}\n\nfunction Period(props: Period & { time: string }) {\n    return (\n        <div className=\"period\">\n            <p className=\"period__time\">\n                <time>{props.time}</time>\n            </p>\n            <p className={`babyactivity babyactivity--${props.type.toLowerCase()}`}>{props.type}</p>\n        </div>\n    )\n}\n\nfunction Hour(props: Hour & { time: number }) {\n    const hour = props.time;\n    return (\n        <div className=\"hour\">\n            <Period type={props.periods[0].type} time={translateTime(hour, \"00\")}/>\n            <Period type={props.periods[1].type} time={translateTime(hour, \"15\")}/>\n            <Period type={props.periods[2].type} time={translateTime(hour, \"30\")}/>\n            <Period type={props.periods[3].type} time={translateTime(hour, \"45\")}/>\n        </div>\n    )\n}\n\nfunction buildInitialState(): State {\n    return {\n        schedule: buildDay()\n    }\n}\n\nfunction App() {\n\n    const [state, setState] = React.useState(buildInitialState());\n\n    return (\n        <div className=\"App\">\n            <h1>Baby Schedule</h1>\n            <button onClick={() => setState(buildInitialState())}>Rebuild schedule</button>\n            <div className=\"schedule\">\n                {state.schedule.hours.map((hour, index) => <Hour key={index} time={index} periods={hour.periods}/>)}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}