{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["BabyActivity","defaultNames","baby","name","Math","floor","random","length","cry","feed","nappy","sleep","increaseNeed","baseNeed","needRate","randomRate","reduceBabyNeed","activity","config","reducedNeed","newNeed","decreaseNeed","decay","global","newActivity","setBabyActivity","calmedBaby","currentActivity","tick","rate","increaseBabyNeeds","ConfigRow","value","callback","className","htmlFor","id","type","min","max","step","onChange","data-config","defaultConfig","configReducer","state","action","newConfigElement","minutesToHourMins","minutes","hours","mins","toString","padStart","EventRow","endTime","timeClock","time","endTimeClick","buildEventRows","key","App","useReducer","setConfig","handleConfigChange","event","Number","target","isNaN","configTarget","dataset","split","generateEvents","events","segment","thisBaby","lastActivity","push","console","log","buildEvents","useState","setEvents","Object","entries","map","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d1907b8.chunk.js","sourcesContent":["import React, {ChangeEvent, ReactElement, useReducer, useState} from 'react';\nimport './App.css';\n\nenum BabyActivity {\n    sleep = \"sleep\",\n    nappy = \"nappy\",\n    cry = \"cry\",\n    feed = \"feed\",\n}\n\ninterface Time {\n    hour: number,\n    minute: number\n}\n\ninterface Event {\n    time: number\n    endTime: number\n    type: BabyActivity\n}\n\ninterface ActivityConfig {\n    rate: number,\n    decay: number\n}\n\ninterface Config {\n    \"global\": ActivityConfig,\n    [BabyActivity.nappy]: ActivityConfig,\n    [BabyActivity.cry]: ActivityConfig,\n    [BabyActivity.feed]: ActivityConfig,\n    // CRY_RATE: number,\n    // FEED_RATE: number,\n    // NAPPY_RATE: number,\n    // CRY_DECAY: number,\n    // FEED_DECAY: number,\n    // NAPPY_DECAY: number\n}\n\ninterface ConfigAction {\n    action: string;\n    type: 'rate' | 'decay';\n    activity: BabyActivity.nappy | BabyActivity.cry | BabyActivity.feed | 'global';\n    value: number;\n}\n\ntype Events = Event[];\n\ninterface Baby {\n    name: string,\n    [BabyActivity.nappy]: number,\n    [BabyActivity.cry]: number,\n    [BabyActivity.feed]: number,\n    currentActivity: BabyActivity\n}\n\n//\n// const RANDOM_RATE = 0.005;\n//\n// const CRY_RATE = 0.025;\n// const FEED_RATE = 0.025;\n// const NAPPY_RATE = 0.025;\n//\n// const CRY_DECAY = 0.25;\n// const FEED_DECAY = 0.1666667;\n// const NAPPY_DECAY = 1;\n\nconst segmentLength = 5;\n\n// how many 5 minutes there are in the day\nconst TIME_SEGMENTS = (24 * 60) / segmentLength;\n// const TIME_SEGMENTS = 25;\n\nconst defaultNames = [\n    'Horace',\n    'Petunia',\n    'Gregory',\n    'Lilac',\n    'Pierre',\n    'Shanti'\n]\n\nconst baby: Baby = {\n    name: defaultNames[Math.floor(Math.random() * defaultNames.length)],\n    [BabyActivity.cry]: 0,\n    [BabyActivity.feed]: 0,\n    [BabyActivity.nappy]: 0,\n    currentActivity: BabyActivity.sleep\n}\n\nfunction increaseNeed(baseNeed: number, needRate: number, randomRate: number): number {\n    return baseNeed + (Math.random() * randomRate) + needRate * segmentLength;\n}\n\nfunction decreaseNeed(baseNeed: number, needRate: number, randomRate: number): number {\n    const newNeed = baseNeed - (Math.random() * randomRate) - needRate * segmentLength;\n    return newNeed > 0 ? newNeed : 0;\n}\n\nfunction increaseBabyNeeds(baby: Baby, config: Config): Baby {\n    // Increase baby state\n    const cry = increaseNeed(baby[BabyActivity.cry], config[BabyActivity.cry].rate, config.global.rate)\n    const feed = increaseNeed(baby[BabyActivity.feed], config[BabyActivity.feed].rate, config.global.rate)\n    const nappy = increaseNeed(baby[BabyActivity.nappy], config[BabyActivity.nappy].rate, config.global.rate)\n    return {\n        ...baby,\n        [BabyActivity.cry]: cry,\n        [BabyActivity.feed]: feed,\n        [BabyActivity.nappy]: nappy,\n    };\n}\n\nfunction reduceBabyNeed(baby: Baby, activity: BabyActivity, config: Config): Baby {\n    if (activity === BabyActivity.sleep) {\n        return baby;\n    }\n    const reducedNeed = decreaseNeed(baby[BabyActivity[activity]], config[BabyActivity[activity]].decay, config.global.decay)\n    const newActivity = reducedNeed === 0 ? BabyActivity.sleep : activity;\n\n    return {\n        ...baby,\n        [BabyActivity[activity]]: reducedNeed,\n        currentActivity: newActivity\n    };\n\n}\n\nfunction setBabyActivity(baby: Baby, activity: BabyActivity, config: Config): Baby {\n    const calmedBaby = reduceBabyNeed(baby, activity, config);\n    return {\n        ...calmedBaby,\n        currentActivity: activity\n    };\n}\n\nfunction tick(baby: Baby, config: Config): Baby {\n    const {cry, feed, nappy, currentActivity} = baby;\n\n    // If baby is sleeping\n    if (\n        currentActivity === BabyActivity.sleep\n    ) {\n        if (\n            cry < 1 &&\n            feed < 1 &&\n            nappy < 1\n        ) {\n            return increaseBabyNeeds(baby, config);\n        }\n\n        // If state is above 1, then set the activity to that thing and reduce activity's score\n        if (cry >= 1) {\n            return setBabyActivity(baby, BabyActivity.cry, config);\n        }\n        if (feed >= 1) {\n            return setBabyActivity(baby, BabyActivity.feed, config);\n        }\n        if (nappy >= 1) {\n            return setBabyActivity(baby, BabyActivity.nappy, config);\n        }\n    }\n\n    // If baby is not sleeping, reduce that activity's score\n    // If score is equal to 0, baby falls asleep again\n\n    return reduceBabyNeed(baby, baby.currentActivity, config)\n\n}\n\nfunction buildEvents(baby: Baby, config: Config): Events {\n    // return {\n    //     events: [\n    //         {\n    //             time: 123,\n    //             type: BabyActivity.cry\n    //         }\n    //     ]\n    // }\n\n    const events = [];\n    let segment: number = 0;\n    let thisBaby: Baby = baby;\n    let lastActivity: BabyActivity = BabyActivity.sleep;\n\n    events.push({\n        time: segment,\n        type: lastActivity,\n        endTime: 0\n    })\n\n    while (segment < TIME_SEGMENTS) {\n        // console.log(`segment: ${segment}`);\n        // console.log(`baby`, JSON.stringify(thisBaby, null, 2));\n        thisBaby = tick(thisBaby, config);\n        if (thisBaby.currentActivity !== lastActivity) {\n            events[events.length - 1].endTime = segment;\n            lastActivity = thisBaby.currentActivity;\n            events.push({\n                time: segment,\n                type: thisBaby.currentActivity,\n                endTime: segment + 1\n            })\n        }\n        segment = segment + 1\n    }\n\n    events[events.length - 1].endTime = segment;\n\n    console.log(events);\n    return events;\n}\n\nfunction ConfigRow({name, value, callback}: { name: string, value: number, callback: (event: ChangeEvent<HTMLInputElement>) => void }): ReactElement {\n    return (\n        <div className=\"config__item\">\n            <label htmlFor={name}>{name}</label>\n            <input id={name} type=\"range\" min=\"0\" max=\"1\"  step=\"any\" value={value} onChange={callback} data-config={name}/>\n            <input type=\"number\" min=\"0\" max=\"1\"  step=\"0.001\" value={value} onChange={callback} data-config={name}/>\n        </div>\n    )\n}\n\nconst defaultConfig: Config = {\n    global: {\n        rate: 0.005,\n        decay: 0.005,\n    },\n    [BabyActivity.cry]: {\n        rate: 0.025,\n        decay: 0.025,\n    },\n    [BabyActivity.feed]: {\n        rate: 0.025,\n        decay: 0.167,\n    },\n    [BabyActivity.nappy]: {\n        rate: 0.025,\n        decay: 1,\n    },\n}\n\nfunction configReducer(state: Config, {type, value, action, activity}: ConfigAction) {\n    const newConfigElement = {\n        rate: state[activity].rate,\n        decay: state[activity].decay,\n    }\n\n    newConfigElement[type] = value;\n\n    switch (action) {\n        case 'set':\n            return {\n                ...state,\n                [activity]: newConfigElement,\n            }\n        default:\n            return state;\n    }\n}\n\nfunction minutesToHourMins(minutes: number): string {\n    const hours = Math.floor(minutes/60);\n    const mins = minutes % 60;\n    return `${hours}:${mins.toString(10).padStart(2, '0')}`;\n}\n\nfunction EventRow({endTime, type, time}: Event) {\n    const timeClock = minutesToHourMins(time * segmentLength);\n    const endTimeClick = minutesToHourMins(endTime * segmentLength);\n    return (\n        <p>From {timeClock} to {endTimeClick} - {type}</p>\n    )\n}\n\nfunction buildEventRows({time, endTime, type}: Event) {\n    return (<EventRow key={`${time}-${endTime}`} time={time} endTime={endTime} type={type} />)\n}\n\nfunction App() {\n    const [config, setConfig] = useReducer(configReducer, defaultConfig);\n\n    function handleConfigChange(event: ChangeEvent<HTMLInputElement>) {\n        const value = Number(event.target.value);\n        if (isNaN(value)) {\n            return;\n        }\n        const configTarget = event.target.dataset['config'];\n        if (!configTarget) {\n            return;\n        }\n\n        const [activity, type] = configTarget.split('.');\n\n        if (\n            activity !== 'global' &&\n            activity !== BabyActivity.feed &&\n            activity !== BabyActivity.cry &&\n            activity !== BabyActivity.nappy\n        ) {\n            return;\n        }\n\n        if (type !== 'rate' && type !== 'decay') {\n            return;\n        }\n\n        setConfig({\n            action: 'set',\n            activity: activity,\n            type: type,\n            value: value\n        });\n    }\n\n    function buildConfigRow([key, config]: [string, ActivityConfig]): ReactElement {\n\n        return (\n            <div key={`${key}`} className=\"config-row\">\n                <ConfigRow  name={`${key}.rate`} value={config.rate} callback={handleConfigChange}/>\n                <ConfigRow name={`${key}.decay`} value={config.decay}\n                           callback={handleConfigChange}/>\n            </div>\n        )\n\n    }\n\n    function generateEvents() {\n        return buildEvents(baby, config);\n    }\n\n    const [events, setEvents] = useState(generateEvents);\n\n    function updateEvents() {\n        setEvents(generateEvents);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Baby Schedule</h1>\n\n            <div className=\"config\">\n                {Object.entries(config).map(buildConfigRow)}\n                <button onClick={() => updateEvents()}>Rebuild Events</button>\n            </div>\n\n            <div className=\"schedule\">\n                {events.map(buildEventRows)}\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}